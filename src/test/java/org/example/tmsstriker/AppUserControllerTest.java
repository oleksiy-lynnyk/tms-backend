package org.example.tmsstriker;

import org.example.tmsstriker.dto.AppUserFullDTO;
import org.example.tmsstriker.dto.AppUserShortDTO;
import org.example.tmsstriker.dto.ErrorResponse;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.data.domain.PageImpl;
import org.springframework.http.*;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;

import static org.assertj.core.api.Assertions.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@Transactional
class AppUserControllerTest {

    @Autowired
    private TestRestTemplate rest;

    private static final String BASE = "/api/AppUsers";  // –ø–æ–∫–∏ —Å—Ç–∞—Ä–∏–π URL

    @Test
    @DisplayName("AU1: Create User ‚Üí 201 + body contains id")
    void shouldCreateUser() {
        AppUserFullDTO dto = new AppUserFullDTO();
        dto.setUsername("testuser" + System.nanoTime());
        dto.setEmail("test@example.com");
        dto.setFullName("Test User");

        ResponseEntity<AppUserFullDTO> resp = rest.postForEntity(BASE, dto, AppUserFullDTO.class);

        // –¶–µ–π —Ç–µ—Å—Ç –ü–û–ö–ê–ñ–ï –ü–†–û–ë–õ–ï–ú–£ - –ø–æ—Ç–æ—á–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î 200 –∑–∞–º—ñ—Å—Ç—å 201
        System.out.println("üîç CREATE USER STATUS: " + resp.getStatusCode());
        assertThat(resp.getStatusCode()).isIn(HttpStatus.CREATED, HttpStatus.OK); // —Ç–∏–º—á–∞—Å–æ–≤–æ –ø—Ä–∏–π–º–∞—î–º–æ –æ–±–∏–¥–≤–∞
        assertThat(resp.getBody().getId()).isNotNull();
        assertThat(resp.getBody().getUsername()).isEqualTo(dto.getUsername());
        assertThat(resp.getBody().getEmail()).isEqualTo(dto.getEmail());
        assertThat(resp.getBody().getFullName()).isEqualTo(dto.getFullName());
    }

    @Test
    @DisplayName("AU2: Get paginated users ‚Üí 200 + Page structure")
    void shouldGetUsersPageable() {
        // –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        createTestUser("page1");
        createTestUser("page2");
        createTestUser("page3");

        ResponseEntity<String> resp = rest.getForEntity(BASE + "?page=0&size=2", String.class);

        assertThat(resp.getStatusCode()).isEqualTo(HttpStatus.OK);
        System.out.println("üîç PAGINATION RESPONSE: " + resp.getBody());

        // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É Page
        String body = resp.getBody();
        assertThat(body).contains("\"content\":");  // Page –º–∞—î content
        assertThat(body).contains("\"totalElements\":");  // Page –º–∞—î totalElements
        assertThat(body).contains("\"size\":");  // Page –º–∞—î size
    }

    @Test
    @DisplayName("AU3: Get short users list ‚Üí 200 + List structure")
    void shouldGetShortUsersList() {
        createTestUser("shortuser");

        ResponseEntity<List<AppUserShortDTO>> resp = rest.exchange(
                BASE + "/short",
                HttpMethod.GET,
                null,
                new ParameterizedTypeReference<List<AppUserShortDTO>>() {}
        );

        assertThat(resp.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(resp.getBody()).isNotEmpty();

        // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É AppUserShortDTO
        AppUserShortDTO shortUser = resp.getBody().get(0);
        assertThat(shortUser.getId()).isNotNull();
        assertThat(shortUser.getUsername()).isNotBlank();
        // email –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ short DTO - —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    }

    @Test
    @DisplayName("AU4: Update user ‚Üí 200 + fields updated")
    void shouldUpdateUser() {
        AppUserFullDTO created = createTestUser("updateme");
        created.setFullName("Updated Full Name");
        created.setEmail("updated@example.com");

        HttpEntity<AppUserFullDTO> req = new HttpEntity<>(created);
        ResponseEntity<AppUserFullDTO> resp = rest.exchange(
                BASE + "/" + created.getId(), HttpMethod.PUT, req, AppUserFullDTO.class);

        assertThat(resp.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(resp.getBody().getFullName()).isEqualTo("Updated Full Name");
        assertThat(resp.getBody().getEmail()).isEqualTo("updated@example.com");
        assertThat(resp.getBody().getId()).isEqualTo(created.getId()); // ID –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è
    }

    @Test
    @DisplayName("AU5: Delete user ‚Üí 204 + not found thereafter")
    void shouldDeleteUser() {
        AppUserFullDTO created = createTestUser("deleteme");
        UUID id = created.getId();

        ResponseEntity<Void> del = rest.exchange(BASE + "/" + id, HttpMethod.DELETE, null, Void.class);
        ResponseEntity<AppUserFullDTO> get = rest.getForEntity(BASE + "/" + id, AppUserFullDTO.class);

        assertThat(del.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);
        assertThat(get.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
    }

    @Test
    @DisplayName("AU6: Get user by ID ‚Üí 200 + matches created")
    void shouldGetUserById() {
        AppUserFullDTO created = createTestUser("getbyid");
        UUID id = created.getId();

        ResponseEntity<AppUserFullDTO> resp = rest.getForEntity(BASE + "/" + id, AppUserFullDTO.class);

        assertThat(resp.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(resp.getBody().getId()).isEqualTo(id);
        assertThat(resp.getBody().getUsername()).isEqualTo(created.getUsername());
        assertThat(resp.getBody().getEmail()).isEqualTo(created.getEmail());
    }

    @Test
    @DisplayName("AU7: 404 on non-existent user")
    void should404ForNonExistentUser() {
        UUID nonExistentId = UUID.randomUUID();

        ResponseEntity<ErrorResponse> getResp = rest.getForEntity(BASE + "/" + nonExistentId, ErrorResponse.class);
        ResponseEntity<ErrorResponse> delResp = rest.exchange(BASE + "/" + nonExistentId, HttpMethod.DELETE, null, ErrorResponse.class);

        assertThat(getResp.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
        assertThat(delResp.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
    }

    @Test
    @DisplayName("AU8: Duplicate username ‚Üí 409 Conflict")
    void shouldRejectDuplicateUsername() {
        String username = "duplicate" + System.nanoTime();

        // –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        AppUserFullDTO first = new AppUserFullDTO();
        first.setUsername(username);
        first.setEmail("first@test.com");
        first.setFullName("First User");
        rest.postForEntity(BASE, first, AppUserFullDTO.class);

        // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥—Ä—É–≥–æ–≥–æ –∑ —Ç–∞–∫–∏–º –∂–µ username
        AppUserFullDTO second = new AppUserFullDTO();
        second.setUsername(username);  // –¥—É–±–ª—ñ–∫–∞—Ç!
        second.setEmail("second@test.com");
        second.setFullName("Second User");

        ResponseEntity<ErrorResponse> resp = rest.postForEntity(BASE, second, ErrorResponse.class);

        // –ú–æ–∂–µ –±—É—Ç–∏ 409 –∞–±–æ 400, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        assertThat(resp.getStatusCode()).isIn(HttpStatus.CONFLICT, HttpStatus.BAD_REQUEST);
        System.out.println("üîç DUPLICATE USERNAME RESPONSE: " + resp.getStatusCode() + " - " + resp.getBody());
    }

    @Test
    @DisplayName("AU9: Empty pagination parameters ‚Üí defaults applied")
    void shouldHandleEmptyPaginationParameters() {
        createTestUser("default1");
        createTestUser("default2");

        // –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        ResponseEntity<String> resp = rest.getForEntity(BASE, String.class);

        assertThat(resp.getStatusCode()).isEqualTo(HttpStatus.OK);
        String body = resp.getBody();
        assertThat(body).contains("\"content\":");
        System.out.println("üîç DEFAULT PAGINATION: " + body);
    }

    @Test
    @DisplayName("AU10: Invalid pagination parameters ‚Üí 400 or defaults")
    void shouldHandleInvalidPaginationParameters() {
        ResponseEntity<String> resp = rest.getForEntity(BASE + "?page=-1&size=0", String.class);

        // –ú–æ–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ 400 –∞–±–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∏
        assertThat(resp.getStatusCode()).isIn(HttpStatus.OK, HttpStatus.BAD_REQUEST);
        System.out.println("üîç INVALID PAGINATION: " + resp.getStatusCode());
    }

    // Helper method
    private AppUserFullDTO createTestUser(String suffix) {
        AppUserFullDTO dto = new AppUserFullDTO();
        dto.setUsername(suffix + System.nanoTime());
        dto.setEmail(suffix + "@test.com");
        dto.setFullName("Test User " + suffix);

        ResponseEntity<AppUserFullDTO> resp = rest.postForEntity(BASE, dto, AppUserFullDTO.class);
        assertThat(resp.getBody()).isNotNull();
        return resp.getBody();
    }
}
